<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Digital Plane Table</title>
<style>
body { font-family: Arial; padding: 20px; max-width: 600px; margin:auto; }
button { padding: 10px 15px; font-size: 16px; margin: 5px 0; }
#points { margin-top: 20px; }
#map { width: 100%; height: 300px; margin-top: 20px; border:1px solid #ccc; }
</style>
</head>
<body>

<h2>Digital Plane Table (GPS)</h2>
<button id="markBtn">Mark Current Point</button>
<div id="points">
  <h3>Marked Points:</h3>
  <ul id="pointList"></ul>
</div>
<div id="map"></div>

<script>
// Array to store points
let points = [];

// Haversine formula to calculate distance in meters
function getDistance(lat1, lon1, lat2, lon2) {
    const R = 6371e3; // Earth radius in meters
    const φ1 = lat1 * Math.PI/180;
    const φ2 = lat2 * Math.PI/180;
    const Δφ = (lat2-lat1) * Math.PI/180;
    const Δλ = (lon2-lon1) * Math.PI/180;

    const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +
              Math.cos(φ1) * Math.cos(φ2) *
              Math.sin(Δλ/2) * Math.sin(Δλ/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    const d = R * c;
    return d; // in meters
}

// Update the point list
function updatePointList() {
    const ul = document.getElementById('pointList');
    ul.innerHTML = "";
    points.forEach((p, index) => {
        let distance = 0;
        if(index > 0) {
            const prev = points[index-1];
            distance = getDistance(prev.lat, prev.lon, p.lat, p.lon).toFixed(2);
        }
        ul.innerHTML += `<li>Point ${index+1}: (${p.lat.toFixed(6)}, ${p.lon.toFixed(6)}) ${distance ? " - Distance from previous: " + distance + " m" : ""}</li>`;
    });
}

// Mark current GPS point
document.getElementById('markBtn').addEventListener('click', () => {
    if(navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(position => {
            points.push({lat: position.coords.latitude, lon: position.coords.longitude});
            updatePointList();
        }, error => {
            alert("Error getting location: " + error.message);
        }, {enableHighAccuracy: true});
    } else {
        alert("Geolocation is not supported by this browser.");
    }
});
</script>


  // ✅ When this page opens, mark user as subscribed
  localStorage.setItem("subscribed", "true");
  console.log("User subscription status saved.");

  
</script>
</body>
</html>
